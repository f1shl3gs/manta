syntax = "proto3";

package manta;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "types.proto";

// it should be enough for sync resource from other provider with Organization and Node
service Control {
  // Organization
  rpc FindOrganization (FindOrganizationRequest) returns (FindOrganizationResponse);
  rpc FindOrganizations (FindOrganizationsRequest) returns (FindOrganizationsResponse);
  rpc CreateOrganization (CreateOrganizationRequest) returns (CreateOrganizationResponse);
  rpc UpdateOrganization (UpdateOrganizationRequest) returns (UpdateOrganizationResponse);
  rpc DeleteOrganization (DeleteOrganizationRequest) returns (DeleteOrganizationResponse);

  // Node
  rpc FindNode (FindNodeRequest) returns (FindNodeResponse);
  rpc FindNodes (FindNodesRequest) returns (FindNodesResponse);
  rpc CreateNode (CreateNodeRequest) returns (CreateNodeResponse);
  rpc UpdateNode (UpdateNodeRequest) returns (UpdateNodeResponse);
  rpc DeleteNode (DeleteNodeRequest) returns (DeleteNodeResponse);

  // Check
  rpc CreateCheck (CreateCheckRequest) returns (CreateCheckResponse) {};
}

message FindOrganizationRequest {
  uint64 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
}

message FindOrganizationResponse {
  Organization Organization = 1;
}

message FindOrganizationsRequest {
  string name = 1;
}

message FindOrganizationsResponse {
  repeated Organization Organizations = 1;
}

message CreateOrganizationRequest {
  Organization Organization = 1;
}

message CreateOrganizationResponse {}

message UpdateOrganizationRequest {
  uint64 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];

  string name = 2;
  string description = 3;

  map<string, string> annotations = 5;
}

message UpdateOrganizationResponse {
  Organization Organization = 1;
}

message DeleteOrganizationRequest {
  uint64 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
}

message DeleteOrganizationResponse {}

// node
message FindNodeRequest {
  uint64 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
}

message FindNodeResponse {
  Node node = 1;
}

message FindNodesRequest {
  uint64 orgID = 1 [(gogoproto.casttype) = "ID", (gogoproto.nullable) = true, (gogoproto.customname) = "OrgID"];
}

message FindNodesResponse {
  repeated Node nodes = 1;
}

message CreateNodeRequest {
  Node node = 1;
}

message CreateNodeResponse {}

message UpdateNodeRequest {
  uint64 id = 1 [(gogoproto.casttype) = "ID", (gogoproto.customname) = "ID"];
  string hostname = 2;
  string env = 3;
}

message UpdateNodeResponse {
  Node node = 1;
}

message DeleteNodeRequest {
  uint64 id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID", (gogoproto.nullable) = true];
}

message DeleteNodeResponse {}

// Check
message CreateCheckRequest {
  Check check = 1;
}

message CreateCheckResponse {}