openapi: 3.0.1
info:
  title: Manta HTTP API
  version: 1.0.0

servers:
  - url: /api/v1

tags:
  - name: Setup
  - name: Organizations
  - name: Otcls
    description: OpenTelemetry Collector

paths:
  /setup:
    post:
      operationId: Setup
      tags:
        - Setup
      summary: Setup the service
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: User and Organization to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnBoardingRequest"
      responses:
        201:
          description: Initial success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orgs:
    get:
      operationId: GetOrgs
      tags:
        - Organizations
      summary: List all organizations
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        200:
          description: A list of organizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organizations"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: CreateOrg
      tags:
        - Organizations
      summary: Create an Organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Organization to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        201:
          description: Organization created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
  /orgs/{id}:
    get:
      operationId: GetOrgByID
      tags:
        - Organizations
      summary: Retrieve an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          required: true
          description: The ID of the organization to get
          schema:
            type: string
      responses:
        200:
          description: Organization details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteOrganization
      tags:
        - Organizations
      summary: Delete Organizaion by ID
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          required: true
          description: The ID of the organization to get
          schema:
            type: string
      responses:
        204:
          description: Organization deleted
        default:
          $ref: "#/components/responses/UnexpectedError"

  /scrapes:
    get:
      operationId: ListScrapes
      tags:
        - Scrapes
      summary: List all Scrapes
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: orgID
          description: Filter the list by orgID
          schema:
            type: string
      responses:
        200:
          description: Scrape List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Scrape"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      operationId: CreateScrape
      tags:
        - Scrapes
      summary: Create Scrape
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Scrape"
      responses:
        204:
          description: Create Success
        default:
          $ref: "#/components/responses/UnexpectedError"

  /checks:
    get:
      operationId: ListChecks
      tags:
        - Checks
      summary: List al Checks
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: orgID
          description: List checks with this orgID
          required: false
          schema:
            type: string
      responses:
        200:
          description: Check List
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checks"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: CreateChecks
      tags:
        - Checks
      summary: Create a new Check
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Check to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Check"
      responses:
        204:
          description: Create Check success
        default:
          $ref: "#/components/responses/UnexpectedError"
  /checks/{id}:
    get:
      operationId: GetCheck
      tags:
        - Checks
      summary: Find Check by id
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the Otcl to get
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Check"
        default:
          $ref: "#/components/responses/UnexpectedError"

    put:
      operationId: UpdateCheck
      tags:
        - Checks
      summary: Update checks
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The check ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Check"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Check"
        default:
          $ref: "#/components/responses/UnexpectedError"

    patch:
      operationId: PatchCheck
      tags:
        - Checks
      summary: Update a check
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The check ID
      requestBody:
        description: Check update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckUpdate"
      responses:
        200:
          description: Update successfuly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Check"
        default:
          $ref: "#/components/responses/UnexpectedError"

    delete:
      operationId: DeleteCheck
      tags:
        - Checks
      summary: Delete Check by id
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          required: true
          schema:
            type: string

      responses:
        204:
          description: Delete check by id success
        default:
          $ref: "#/components/responses/UnexpectedError"

  /otcls:
    get:
      operationId: GetOtcls
      tags:
        - Otcls
      summary: List all OpenTelemetry Collector
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        200:
          description: A list of Otcl
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Otcl"
        default:
          $ref: "#/components/responses/UnexpectedError"

    post:
      operationId: CreateOtcl
      tags:
        - Otcls
      summary: Create an Otcl
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Otcl to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OtclRequest"
      responses:
        201:
          description: Otcl created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Otcl"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /otcls/{id}:
    get:
      operationId: GetOtcl
      tags:
        - Otcls
      summary: Get Otcl by ID
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the Otcl to get
      responses:
        200:
          description: Otcl details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Otcl"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: DeleteOtcl
      tags:
        - Otcls
      summary: Delete Otcl by ID
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the Otcl to get
      responses:
        204:
          description: Delete otcl success
        default:
          $ref: "#/components/responses/UnexpectedError"

  /notification_endpoint:
    get:
      operationId: ListNotificationEndpoint
      tags:
        - Notification Endpoint
      summary: List all notification
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: orgID
          required: true
      responses:
        200:
          description: Notification Endpoint List
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationEndpoints"
        default:
          $ref: "#/components/responses/UnexpectedError"
  /notification_endpoint/{id}:
    get:
      operationId: GetNotificationEndpoint
      summary: Get NotificationEndpoint
      tags:
        - Notification Endpoint
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: NotificationEndpoint Detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationEndpoint"
        default:
          $ref: "#/components/responses/UnexpectedError"

    delete:
      operationId: DeleteNotificationEndpoint
      summary: Delete notification endpoint by id
      tags:
        - Notification Endpoint
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Delete success
        default:
          $ref: "#/components/responses/UnexpectedError"

  /orgs/{orgID}/secrets:
    get:
      operationId: ListSecrets
      summary: List all secrets of the org
      description: List all secrets of the org, the value will not be returned for security
      tags:
        - Secrets
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - name: orgID
          in: path
          required: true
      responses:
        200:
          description: Secrets
          content:
            applicatoin/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SecretWithoutValue"
        default:
          $ref: "#/components/responses/UnexpectedError"

    put:
      operationId: PutSecret
      summary: Create or update a secret
      description: Create or update a secret
      tags:
        - Secrets
      parameters:
        - $ref: "#/components/responses/UnexpectedError"
        - name: orgID
          in: path
          required: true
          description: Organization ID
      requestBody:
        required: true
        description: Secrets to create or update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Secret"
      responses:
        201:
          description: Put secret success
        default:
          $ref: "#/components/responses/UnexpectedError"
  /orgs/{orgID}/secrets/{key}:
    delete:
      operationId: DeleteSecret
      summary: Delete secret
      description: Delete a secret by key
      tags:
        - Secrets
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        200:
          description: Delete secret success
        default:
          $ref: "#/components/responses/UnexpectedError"

  /migrations:
    get:
      operationId: GetMigrations
      summary: List all migrations
      description: Migrations could be very helpful when debug
      tags:
        - Migrations
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        200:
          description: Migration details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Migration"

components:
  parameters:
    TraceSpan:
      in: header
      name: Zap-Trace-Span
      schema:
        type: string
      description: OpenTracing span context
      example:
        trace_id: "1"
        span_id: "1"
        baggage:
          key: value
      required: false

  schemas:
    Error:
      properties:
        code:
          description: Code is the machine-readable error code.
          readOnly: true
          type: string
          # This set of enumerations must remain in sync with the constants defined in errors.go
          enum:
            - internal error
            - not found
            - conflict
            - invalid
            - unprocessable entity
            - empty value
            - unavailable
            - forbidden
            - too many requests
            - unauthorized
            - method not allowed
        message:
          readOnly: true
          description: Message is a human-readable message.
          type: string
      required: [ code, message ]

    OnBoardingRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        org:
          type: string

    Migration:
      type: object
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        state:
          type: string
          enum:
            - up
            - down
        start_at:
          type: string
          format: date-time
        finished_at:
          type: string
          format: date-time
    Organization:
      type: object
      properties:
        id:
          readOnly: true
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        desc:
          type: string
    Organizations:
      type: array
      items:
        $ref: "#/components/schemas/Organization"

    Otcl:
      type: object
      properties:
        id:
          readOnly: true
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        desc:
          type: string
        orgID:
          type: string
          readOnly: true
        type:
          type: string
        content:
          type: string
          description: Config content for the OpenTelemetry Collector
    OtclRequest:
      type: object
      properties:
        name:
          type: string
        desc:
          type: string
        orgID:
          type: string
          readOnly: true
        type:
          type: string
        content:
          type: string
          description: Config content for the OpenTelemetry Collector

    Otcls:
      type: array
      items:
        $ref: "#/components/schemas/Otcl"

    Threshold:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - gt
            - lt
            - eq
            - inside
            - outside
        value:
          type: number
        min:
          type: number
        max:
          type: number

    Condition:
      type: object
      properties:
        status:
          type: string
        pending:
          type: string
        threshold:
          $ref: "#/components/schemas/Threshold"

    CheckUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - active
            - inactive

    Check:
      type: object
      properties:
        id:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        desc:
          type: string
        status:
          type: string
          enum:
            - active
            - inactive
        orgID:
          type: string
        expr:
          type: string
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
    Checks:
      type: array
      items:
        $ref: "#/components/schemas/Check"

    Secret:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string

    SecretWithoutValue:
      type: object
      required: key
      properties:
        key:
          type: string

    NotificationEndpoint:
      type: object
      required: content_template
      properties:
        id:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        desc:
          type: string
        status:
          type: string
          enum:
            - active
            - inactive
        url:
          type: string
        method:
          type: string
          enum:
            - POST
            - GET
            - PUT
        headers:
          type: object
        content_template:
          type: string
    NotificationEndpoints:
      type: array
      items:
        $ref: "#/components/schemas/NotificationEndpoint"
    Scrape:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        orgID:
          type: string
          readOnly: true
        name:
          type: string
        desc:
          type: string
        labels:
          type: object
        targets:
          type: array
          items:
            type: string
  responses:
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"