syntax = "proto3";

package pb;

import "gogoproto/gogo.proto";

message KeyValue {
  bytes key = 1;
  bytes value = 2;
}

message RangeRequest {
  enum SortOrder {
    None = 0;
    ASCEND = 1;
    DESCEND = 2;
  }

  // key is the first key for the range
  bytes key = 1;

  // limit is a limit on the number of keys returned
  // for the request. When limit is set to 0, it is
  // treated as no limit
  int32 limit = 2;

  // order is the order for returned sorted results
  SortOrder order = 3;
}

message RangeResponse {
  repeated KeyValue kvs = 1 [(gogoproto.nullable) = false];
}

message PutRequest {
  bytes key = 1;
  bytes value = 2;
}

message PutResponse {}

message GetRequest {
  bytes key = 1;
}

message GetResponse {
  bytes value = 1;
}

message DeleteRequest {
  bytes key = 1;
}

message DeleteResponse {}

message DeleteRangeRequest {
  bytes prefix = 1;
}

message DeleteRangeResponse {}

message BackupRequest {
  int64 max_chunk_size = 1;
}

message BackupChunk {
  enum Compress {
    None = 0;
    SNAPPY = 1;
  }

  bytes data = 1;
  Compress compress = 2;
  uint64 crc32 = 3;
}

service KV {
  rpc Get(GetRequest) returns (GetResponse);

  rpc Put(PutRequest) returns (PutResponse);

  rpc Range(RangeRequest) returns (RangeResponse);

  rpc Delete(DeleteRequest) returns (DeleteResponse);

  rpc DeleteRange(DeleteRangeRequest) returns (DeleteRangeResponse);

  rpc Backup(BackupRequest) returns (stream BackupChunk);
}