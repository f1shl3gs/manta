syntax = "proto3";

package pb;

import "gogoproto/gogo.proto";
import "raftpb/raft.proto";

message ProcessRaftMessageRequest {
  raftpb.Message msg = 1 [(gogoproto.nullable) = false];
}

message ProcessRaftMessageResponse {}

message StreamRaftMessageResponse {}

message ResolveAddressRequest {
  // id is the ID to resolve to an address.
  uint64 id = 1;
}

message ResolveAddressResponse {
  // Addr specifies the address of the member
  string addr = 1;
}

service Raft {
  // ProcessRaftMessage sends a raft message to be processed on a raft member,
  // it is called from the RaftMember willing to send a message to it's destination
  rpc ProcessRaftMessage(ProcessRaftMessageRequest) returns (ProcessRaftMessageResponse);

  // StreamRaftMessage accepts a stream of raft messages of type StreamRaftMessageRequest
  // to be processed on a raft member, returning a StreamRaftMessageResponse when processing
  // of the streamed messages is complete. A single stream corresponds to a single raft
  // message, which may be disassembled and streamd as individual messages.
  // It is called from the Raft leader, which uses it to stream messages to a raft member
  rpc StreamRaftMessage(stream raftpb.Message) returns (ProcessRaftMessageResponse);

  // ResolveAddress returns the address where the node with the given ID can be reached
  rpc ResolveAddress(ResolveAddressRequest) returns (ResolveAddressResponse);
}

message JoinRequest {

}

message JoinResponse {

}

message Member {
  uint64 id = 1;
}

message AddRequest {}
message AddResponse {}

message RemoveRequest {}
message RemoveResponse {}

message MembersRequest {}
message MembersResponse {
  repeated Member members = 1;
}

service Membership {
  rpc Add(AddRequest) returns (AddResponse);

  rpc Remove(RemoveRequest) returns (RemoveResponse);

  rpc Members(MembersRequest) returns (MembersResponse);
}

message Done {}

message SendMessageRequest {}
message SendMessageResponse {}

message SnapshotChunk {}

service Transport {
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);

  rpc SendSnapshot(stream SnapshotChunk) returns (Done);
}